import random
import requests
from bs4 import BeautifulSoup
from textblob import TextBlob
import time

# 🧠 AI Dream Interpretation
dream_symbols = {
    "water": "Emotional cleansing, deep transformation, or hidden feelings.",
    "fire": "Power, destruction, rebirth, or intense passion.",
    "flying": "Spiritual freedom, escape, or achieving a higher level of awareness.",
    "falling": "Loss of control, fear of failure, or deep personal change.",
    "snakes": "Hidden enemies, transformation, or ancient wisdom.",
    "money": "Wealth, self-worth, or major financial opportunities ahead."
}

def analyze_dream(dream):
    if not dream:
        return "⚠️ Please describe your dream in detail."
    
    for symbol in dream_symbols.keys():
        if symbol in dream.lower():
            return f"🌙 AI Interpretation: {dream_symbols[symbol]}"
    
    return "🤔 AI: I need more details to decode your dream."

# 🌍 AI Global Forecasting & Power Shift Predictions
def get_global_news():
    url = "https://www.reuters.com/world"
    headers = {"User-Agent": "Mozilla/5.0"}
    
    try:
        response = requests.get(url, headers=headers, timeout=5)
        response.raise_for_status()
        soup = BeautifulSoup(response.text, "html.parser")
        headlines = [h.text.strip() for h in soup.find_all("h3") if h.text.strip()]
        return headlines[:5] if headlines else ["⚠️ No news headlines found."]
    except requests.RequestException:
        return ["⚠️ Failed to retrieve global news. Check your internet connection."]

def detect_power_shift():
    predictions = [
        "🔥 A major financial crash is forming. Watch global markets closely.",
        "🚨 Political instability is rising. A staged event may happen soon.",
        "💰 Wealth transfer is happening—massive investments are shifting in secret."
    ]
    return random.choice(predictions)

# 📈 AI Quantum Finance & Market Manipulation
def get_financial_data():
    url = "https://www.investing.com/news/"
    headers = {"User-Agent": "Mozilla/5.0"}

    try:
        response = requests.get(url, headers=headers, timeout=5)
        response.raise_for_status()
        return "📈 AI: Financial market trends retrieved successfully!"
    except requests.RequestException:
        return "⚠️ Failed to retrieve financial market data."

def detect_market_manipulation():
    patterns = [
        "⚠️ AI detected unusual hedge fund movements—something big is happening.",
        "🚨 Market algorithm manipulation detected—watch for sudden stock crashes.",
        "🔥 Crypto market is being pumped artificially—massive whales are moving money."
    ]
    return random.choice(patterns)

# 🎭 AI Celebrity Script Tracking & Hidden Agendas
def track_celeb_news(celebrity_name):
    if not celebrity_name:
        return ["⚠️ Please enter a celebrity name."]
    
    url = f"https://www.google.com/search?q={celebrity_name}+news"
    headers = {"User-Agent": "Mozilla/5.0"}

    try:
        response = requests.get(url, headers=headers, timeout=5)
        response.raise_for_status()
        soup = BeautifulSoup(response.text, "html.parser")
        headlines = [h.text.strip() for h in soup.find_all("h3") if h.text.strip()]
        return headlines[:5] if headlines else ["⚠️ No news found."]
    except requests.RequestException:
        return ["⚠️ Failed to retrieve news data."]

def detect_fake_behavior(celebrity_name):
    scripted_actions = [
        "🔥 Public meltdown before album release.",
        "🚨 Fake controversy to distract from political events.",
        "📢 Promoting an agenda disguised as a personal struggle.",
        "🎭 Staged beef with another celebrity for media hype."
    ]
    return f"🔍 AI Analysis: {celebrity_name} is likely following this script → {random.choice(scripted_actions)}"

# 🎯 AI Human Influence & Social Engineering
def analyze_person(personality_type):
    influence_tactics = {
        "emotional": "🔥 Use emotional appeal—tell stories that trigger deep feelings.",
        "logical": "🧠 Present facts, statistics & rational arguments to win trust.",
        "ego-driven": "😎 Flatter them, make them feel important, and they'll listen.",
        "fear-based": "⚠️ Create urgency or a fear of missing out (FOMO) to push action."
    }
    
    return f"🔍 AI Influence Strategy: {influence_tactics.get(personality_type.lower(), '⚠️ Unknown personality type. Choose from emotional, logical, ego-driven, or fear-based.')}"

# 🔹 Run AI Functions
def main():
    while True:
        print("\n🌌 AI Master System - Choose an Option:")
        print("1️⃣ Dream Interpretation")
        print("2️⃣ Global Forecasting & Power Shift Detection")
        print("3️⃣ Quantum Finance & Market Manipulation")
        print("4️⃣ Celebrity Script Tracking & Hidden Agendas")
        print("5️⃣ Human Influence & Social Engineering")
        print("6️⃣ Exit")

        choice = input("Enter your choice: ").strip()

        if choice == "1":
            user_dream = input("Describe your dream (e.g., 'I was flying over a city'): ").strip()
            print(analyze_dream(user_dream))
        elif choice == "2":
            print("🌍 AI Global Forecasting:")
            for news in get_global_news():
                print(f"- {news}")
            print(detect_power_shift())
        elif choice == "3":
            print(get_financial_data())
            print(detect_market_manipulation())
        elif choice == "4":
            celebrity = input("Enter a celebrity name (e.g., 'Elon Musk'): ").strip()
            print("📰 Latest News:")
            for news in track_celeb_news(celebrity):
                print(f"- {news}")
            print(detect_fake_behavior(celebrity))
        elif choice == "5":
            person_type = input("Enter a personality type (emotional/logical/ego-driven/fear-based): ").strip()
            print(analyze_person(person_type))
        elif choice == "6":
            print("🚀 AI System Exiting...")
            break
        else:
            print("⚠️ Invalid option. Please try again.")

# Run the AI System
if __name__ == "__main__":
    main()
